# -*- coding: utf-8 -*-
# Copyright (c) 2023-present tandemdude
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
from __future__ import annotations

__all__ = []

import argparse
import dataclasses
import json
import pathlib
import string
import textwrap
import typing as t

import hikari
import polib

RAW_OUTPUT_FILE_TEMPLATE = """
# Localization file generated by lightbulb
#
# Modify at your own risk
# Any modifications WILL NOT be preserved the next time it is generated
import hikari
import lightbulb

$locale = lightbulb.Localization(
    hikari.Locale.$locale,
$messages,
)
""".lstrip()
OUTPUT_FILE_TEMPLATE = string.Template(RAW_OUTPUT_FILE_TEMPLATE)
SUPPORTED_LOCALES = [item._value_ for item in hikari.Locale]

parser = argparse.ArgumentParser(
    "lightbulb.localizations.gen",
    description="Generate localization code from existing translation files",
    epilog="The generator expects translation files to be in the correct file structure for gnu gettext.\n"
    "For example: '{source dir}/{locale}/{category}/{filename}.[po|mo]'\n"
    "Populated: 'translations/en-GB/LC_MESSAGES/foo.[po|mo]\n"
    "For supported locales see: https://discord.com/developers/docs/reference#locales",
    formatter_class=argparse.RawDescriptionHelpFormatter,
)
parser.add_argument("source", help="The source directory of the translation files")
parser.add_argument("output", help="The output directory for generated files")
parser.add_argument(
    "-f",
    "--file",
    help="The translation file to read translations from.",
)
parser.add_argument(
    "-c", "--category", default="LC_MESSAGES", help="The category of translation files. Defaults to 'LC_MESSAGES'."
)


@dataclasses.dataclass(slots=True, frozen=True)
class LocalizationConfig:
    source_directory: str
    output_directory: str
    file: str
    category: str


def process_locale_file(locale: str, file: pathlib.Path) -> str:
    parsed: t.Union[polib.POFile, polib.MOFile] = (
        polib.pofile(file.as_posix()) if file.name.endswith(".po") else polib.mofile(file.as_posix())
    )

    obsolete = parsed.obsolete_entries()
    entries = {entry.msgid: entry.msgstr for entry in parsed if entry not in obsolete}

    return OUTPUT_FILE_TEMPLATE.substitute(
        locale=locale, messages=textwrap.indent(json.dumps(entries, indent=4), prefix=" " * 4)
    )


def main(cfg: LocalizationConfig) -> None:
    output_root = pathlib.Path(cfg.output_directory)

    if not cfg.file.endswith(".po") and not cfg.file.endswith(".mo"):
        print("Specified file must either be of '.po' or '.mo' format")
        return

    for item in pathlib.Path(cfg.source_directory).iterdir():
        if not item.is_dir():
            continue

        if item.name in SUPPORTED_LOCALES:
            locale = hikari.Locale(item.name)

            generated_file_path = output_root / (locale._name_ + ".py")
            generated = process_locale_file(locale._name_, item / cfg.category / cfg.file)

            generated_file_path.write_text(generated)


if __name__ == "__main__":
    args = parser.parse_args()
    print(args)
    main(LocalizationConfig(args.source, args.output, args.file, args.category))
